/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Kellariohjelma.gui;

import Sovelluslogiikka.Arvio;
import Sovelluslogiikka.Hankinta;
import Sovelluslogiikka.Kayttaja;
import Sovelluslogiikka.Kellaritoiminnot;
import Sovelluslogiikka.Viini;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;

/**
 * Käyttöliittymän pääluokka
 *
 * @author mikko
 */
public class Aloitusnakyma extends javax.swing.JFrame {

    private Kellaritoiminnot toiminnot;
    private boolean kirjautunut;
    private Kayttaja kayttaja;

    /**
     * luo uuden graafisen käyttöliittymän
     *
     * @param toiminnot ohjelman tietoja hallinoiva Kellaritoiminnot-olio
     */
    public Aloitusnakyma(Kellaritoiminnot toiminnot) {
        initComponents();
        this.toiminnot = toiminnot;
        this.kirjautunut = false;
        this.kayttaja = null;

    }

    public void run() {
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        label1 = new java.awt.Label();
        choice1 = new java.awt.Choice();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabelKirjautunut = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        button1.setLabel("button1");

        button2.setLabel("button2");

        label1.setText("label1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Etsi viinejä");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setText("Viinikellari");

        jButton2.setText("Ok");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelKirjautunut.setText("Et ole kirjautunut");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kirjaudu sisään", "Luo käyttäjätunnus", "Kirjaudu ulos" }));

        jLabel5.setText("Valitse toiminto");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Näytä arviot" }));

        jButton3.setText("Ok");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Valitse viini ja toimenpide");

        jTextPane1.setFont(new java.awt.Font("Ubuntu Mono", 0, 15)); // NOI18N
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 915, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(104, 104, 104)
                                        .addComponent(jLabelKirjautunut, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(jButton1)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jButton2))
                                .addGap(28, 28, 28))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelKirjautunut))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String hakusanat = jTextField1.getText();
        ArrayList<Viini> lista = toiminnot.etsiViineja(hakusanat);
        if (lista.isEmpty()) {
            jTextPane1.setText("Hakusanalla ei löytynyt yhtään viiniä");
            return;
        }
        jList1.setListData(lista.toArray());

    }//GEN-LAST:event_jButton1ActionPerformed
    public Kellaritoiminnot getKellaritoiminnot() {
        return toiminnot;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String komento = (String) jComboBox2.getSelectedItem();
        if (komento.equals("Kirjaudu sisään")) {
            liitaKayttaja();
        } else if (komento.equals("Luo käyttäjätunnus")) {
            luoKayttajatunnus();
        } else if (komento.equals("Kirjaudu ulos")) {
            kirjauduUlos();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String komento = (String) jComboBox1.getSelectedItem();
        if (komento.equals("Näytä arviot")) {
            naytaArviot();
        } else if (komento.equals("Lisää arvio")) {
            lisaaArvio();
        } else if (komento.equals("Lisää viini omaan kellariin")) {
            lisaaHankinta();
        } else if (komento.equals("Lisää viini")) {
            lisaaViini();
        } else if (komento.equals("Näytä oma kellari")) {
            naytaOmaKellari();
        } else if (komento.equals("Juo pullo")) {
            juoPullo();
        } else if (komento.equals("Poista hankinta")) {
            poistaHankinta();
        } else if (komento.equals("Muokkaa viinin tietoja")) {
            muokkaaViinia();
        } else if (komento.equals("Etsi viinejä omasta kellarista")) {
            etsiOmastaKellarista();
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Jlist elementin tapahtumakuuntelija. Kenttien teksti muuttuu sen mukaan
     * minkä luokan olio on valittu JListista
     *
     */
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (jList1.getSelectedValue() != null) {
            jComboBox1.removeAllItems();
            jComboBox1.addItem("Näytä arviot");
            if (kirjautunut) {
                jComboBox1.addItem("Lisää viini");
                jComboBox1.addItem("Näytä oma kellari");
                jComboBox1.addItem("Lisää viini omaan kellariin");
                jComboBox1.addItem("Lisää arvio");
                jComboBox1.addItem("Muokkaa viinin tietoja");
                jComboBox1.addItem("Etsi viinejä omasta kellarista");
                if (jList1.getSelectedValue().getClass().equals(Hankinta.class)) {
                    jComboBox1.addItem("Juo pullo");
                    jComboBox1.addItem("Poista hankinta");
                }
            }
        }
    }//GEN-LAST:event_jList1ValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Choice choice1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelKirjautunut;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables

    /**
     * avaa Kayttajatunnuksen luomiseen tarkoitetun JDialog komponentin
     */
    private void luoKayttajatunnus() {
        UusiKayttaja luo = new UusiKayttaja(this, true, toiminnot);
        while (!luo.getKayttajaluotu()) {
            luo.setVisible(true);
        }
        Kayttaja uusi = luo.getKayttaja();
        if (uusi != null) {
            toiminnot.lisaaKayttaja(uusi);
        }
    }

    /**
     * avaa sisäänkirjautumiseen tarkoitetun JDialog komponentin
     */
    private void liitaKayttaja() {
        Sisaankirjautuminen kirj = new Sisaankirjautuminen(this, true, toiminnot);
        while (!kirj.getKirjautunut()) {
            kirj.setVisible(true);
        }
        Kayttaja uusi = kirj.getKayttaja();
        if (uusi != null) {
            this.kayttaja = uusi;
            uusi.liitaKellari(toiminnot.etsiKayttajanKellari(kayttaja.getKayttajatunnus()));
            kirjaudu();
        }
    }

    /**
     * muuttaa statuksen kirjautuneeksi
     */
    private void kirjaudu() {
        this.kirjautunut = true;
        jLabelKirjautunut.setText("Käyttäjä: " + kayttaja.getKayttajatunnus());
        jComboBox1.addItem("Näytä oma kellari");
        jComboBox1.addItem("Lisää viini");

    }

    /**
     * näyttää JList komponentista valitun viinin arviot JTextPanelissa
     */
    private void naytaArviot() {
        Viini viini = viiniValittu();
        if (viini == null) {
            return;
        }
        String teksti = viini.pitkaToString();
        ArrayList<Arvio> lista = toiminnot.etsiArvioita(viini.getAvain());
        if (lista == null) {
            jTextPane1.setText(teksti + "Viinistä ei ole arvioita");
            return;
        }

        for (Arvio arvio : lista) {
            teksti += arvio.toString();
        }
        jTextPane1.setText(teksti);
    }

    private void virheilmoitus(String ilmoitus) {
        JOptionPane.showMessageDialog(this, ilmoitus);
    }

    /**
     * avaa Arvion lisäämiseen tarkoitetun JDialog komponentin ja lisää uuden
     * arvion järjestelmään
     */
    private void lisaaArvio() {
        Viini viini = viiniValittu();
        if (viini == null) {
            return;
        }
        UusiArvio uusi = new UusiArvio(this, true, viini.getAvain(), kayttaja.getKayttajatunnus());
        while (!uusi.getArvioLuotu()) {
            uusi.setVisible(true);
        }
        Arvio arvio = uusi.getArvio();
        if (arvio != null) {
            toiminnot.lisaaArvio(viini.getAvain(), arvio);
        }
    }

    /**
     * avaa uuden Viinin luomiseen tarkoitetun JDialog komponentin ja lisää
     * uuden Viinin järjestelmään
     */
    private void lisaaViini() {
        UusiViini uusi = new UusiViini(this, true);
        while (!uusi.getViiniLuotu()) {
            uusi.setVisible(true);
        }
        Viini viini = uusi.getViini();
        if (viini != null) {
            toiminnot.lisaaViini(viini);
        }
    }
/**
 * varmistaa että käyttäjä on valinnut viinin JListista
 * @return 
 */
    private Viini viiniValittu() {
        if (jList1.getSelectedValue() == null) {
            virheilmoitus("Etsi ja valitse viini ensin");
            return null;
        }
        if (jList1.getSelectedValue().getClass().equals(Viini.class)) {
            return (Viini) jList1.getSelectedValue();
        }
        Hankinta h = (Hankinta) jList1.getSelectedValue();
        return h.getViini();
    }

    private void lisaaHankinta() {
        Viini viini = viiniValittu();
        if (viini == null) {
            return;
        }
        UusiHankinta uusi = new UusiHankinta(this, true, viini, kayttaja.getKayttajatunnus());
        while (!uusi.gethankintaLuotu()) {
            uusi.setVisible(true);
        }
        Hankinta h = uusi.getHankinta();
        if (h != null) {
            kayttaja.getKellari().add(h);
        }
    }

    private void naytaOmaKellari() {
        String kellari = kayttaja.toString();
        String format = "%1$-10s %2$-70s %3$-9s %4$-8s %5$-8s";
        String otsikot = String.format(format, "Lisätty", "Viini", "Pullo(ml)", "Ostettu", "Jäljellä");
        if (!kayttaja.getKellari().isEmpty()) {
            Collections.sort(kayttaja.getKellari());
            kellari += otsikot + "\n";
            jList1.setListData(kayttaja.getKellari().toArray());
            for (Hankinta h : kayttaja.getKellari()) {
                kellari += h.naytaHankinta() + "\n";
            }
        }
        jTextPane1.setText(kellari);
    }

    private void kirjauduUlos() {
        this.kirjautunut = false;
        this.kayttaja = null;
        jComboBox1.removeAllItems();
        jList1.removeAll();
        jTextPane1.setText("");
        jComboBox1.addItem("Näytä arviot");
        jLabelKirjautunut.setText("Et ole kirjautunut");
    }

    private void juoPullo() {
        if (jList1.getSelectedValue() == null) {
            virheilmoitus("Valitse ensin viini jonka haluat juoda");
            return;
        }
        Hankinta h = (Hankinta) jList1.getSelectedValue();
        h.kulutaPullo();
        if (h.getJaljella() == 0) {
            kayttaja.getKellari().remove(h);
        }
        naytaOmaKellari();
    }

    private void poistaHankinta() {
        Hankinta h = (Hankinta) jList1.getSelectedValue();
        String ilm = "Haluatko varmasti poistaa kellaristasi valitun hankinnan";
        int vast = JOptionPane.showConfirmDialog(this, ilm, "Poista hankinta", JOptionPane.YES_NO_OPTION);
        if (vast == JOptionPane.YES_OPTION) {
            kayttaja.getKellari().remove(h);
            naytaOmaKellari();
        }
    }

    private void muokkaaViinia() {
        Viini vanha = viiniValittu();
        if (vanha == null) {
            return;
        }
        String avain = vanha.getAvain();
        UusiViini muokkaus = new UusiViini(this, true, vanha.tiedostomuoto());
        while (!muokkaus.getViiniLuotu()) {
            muokkaus.setVisible(true);
        }
        Viini uusi = muokkaus.getViini();
        if (uusi != null) {
            toiminnot.getViinit().remove(avain);
            uusi.asetaAvain(avain);
            toiminnot.lisaaViini(uusi);
        }
    }

    private void etsiOmastaKellarista() {
        ArrayList<Viini> osumat = new ArrayList<Viini>();
        String hakusana = jTextField1.getText();
        for (Hankinta h : kayttaja.getKellari()) {
            if (h.getViini().hakuOsuma(hakusana)) {
                osumat.add(h.getViini());
            }
        }
        jList1.setListData(osumat.toArray());
    }
}
